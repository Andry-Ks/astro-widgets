"use strict";

const gridSize = 20; //—Ä–æ–∑–º—ñ—Ä —Å—ñ—Ç–∫–∏ –≥—Ä–∏ (n X n) –∫–ª—ñ—Ç–∏–Ω–æ–∫
const game = document.getElementById('game');
const scoreDisplay = document.getElementById('score');
const timerDisplay = document.getElementById('timer');
let score = 0;
const initialSpeed = 300; //–ø–æ—á–∞—Ç–∫–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–º—ñ—ó
let intervalTime = initialSpeed; //–∑–º—ñ–Ω–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—é —à–≤–∏–¥–∫—ñ—Å—Ç—é –∑–º—ñ—ó
let interval; //–∑–º—ñ–Ω–Ω–∞ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É, —è–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—é—î —Ä—É—Ö –∑–º—ñ—ó –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ñ—É–Ω–∫—Ü—ñ—ó setInterval

let totalTime = 0; //–∑–º—ñ–Ω–Ω–∞ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
let timerInterval; //–∑–º—ñ–Ω–Ω–∞ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –¥–ª—è —Ç–∞–π–º–µ—Ä–∞, —è–∫–∏–π –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è —É —Ñ—É–Ω–∫—Ü—ñ—ó updateTimer

const foodEmojis = ['ü•ù', 'üçí', 'üçâ', 'ü•ë', 'üçá'];
const snakeEmojis = ['‚¨õ', 'üü™', 'üü¶'];
const bonusEmoji = '‚≠ê';
const debuffEmoji = 'üï≥Ô∏è';

let cells; //–º–∞—Å–∏–≤ –∫–ª—ñ—Ç–∏–Ω–æ–∫ –≥—Ä–∏
let snake; //–º–∞—Å–∏–≤ —ñ–Ω–¥–µ–∫—Å—ñ–≤ –∫–ª—ñ—Ç–∏–Ω–æ–∫ —è–∫—ñ —É—Ç–≤–æ—Ä—é—é—Ç—å –∑–º—ñ—é
let direction; //–Ω–∞–ø—Ä—è–º–æ–∫ —Ä—É—Ö—É –∑–º—ñ—ó
let foodIndex; //—ñ–Ω–¥–µ–∫—Å –∫–ª—ñ—Ç–∏–Ω–∫–∏ –∑ —ó–∂–µ—é
let snakeEmoji; //—Å–∏–º–≤–æ–ª —è–∫–∏–π –ø–æ–∑–Ω–∞—á–∞—î –∑–º—ñ—é

let foodItems = [];
let debuffItems = [];
let starItems = [];
let bonusItems = [];

function createGrid() { //—Ñ-—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—ñ—Ç–∫–∏ gridSize X gridSize, –¥–æ–¥–∞–≤–∞–Ω–Ω—è —ó—ó –¥–æ HTML-–µ–ª–µ–º–µ–Ω—Ç–∞ game
    game.innerHTML = ''; //–æ—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –≤–º—ñ—Å—Ç—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ game
    for (let i = 0; i < gridSize * gridSize; i++) {
        const cell = document.createElement('div'); //—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—Ç–∏–Ω–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –≤ —Å—ñ—Ç—Ü—ñ
        cell.classList.add('cell'); //–î–æ–¥–∞—î—Ç—å—Å—è –∫–ª–∞—Å cell
        if ( //–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –º–µ–∂ —Å—ñ—Ç–∫–∏
            i < gridSize || i >= gridSize * (gridSize - 1) ||
            i % gridSize === 0 || i % gridSize === gridSize - 1
        ) {
            cell.classList.add('border'); //—É—Å—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–∞ –º–µ–∂–∞—Ö —Å—ñ—Ç–∫–∏ –æ—Ç—Ä–∏–º—É—é—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–ª–∞—Å border
        }
        game.appendChild(cell); //–¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ—ó –∫–ª—ñ—Ç–∏–Ω–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä game
    }
}

function startTimer() {
    totalTime = 0;
    clearInterval(timerInterval);
    timerInterval = setInterval(updateTimer, 1000);
}

function updateTimer() {
    totalTime++;
    const minutes = Math.floor(totalTime / 60).toString().padStart(2, '0');
    const seconds = (totalTime % 60).toString().padStart(2, '0');
    timerDisplay.innerText = `Time: ${minutes}:${seconds}`;
}

function startGame() {
    clearInterval(interval);
    clearInterval(timerInterval); //–∑—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä
    createGrid();
    score = 0;
    updateScore(0);
    startTimer(); //–∑–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–∞–π–º–µ—Ä
    cells = document.querySelectorAll('.cell');
    snake = getValidStartPosition(); //–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ä—Ç–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –∑–º—ñ–π–∫–∏
    direction = 1; //–ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä—É—Ö –∑–º—ñ–π–∫–∏ –≤–ø—Ä–∞–≤–æ 
    foodIndex = 0;
    snakeEmoji = snakeEmojis[Math.floor(Math.random() * snakeEmojis.length)];
    intervalTime = initialSpeed; //–ø–æ—á–∞—Ç–∫–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å —Ä—É—Ö—É –∑–º—ñ–π–∫–∏

    snake.forEach(index => {
        cells[index].innerText = snakeEmoji;
        cells[index].classList.add('snake');
    });

    randomFood();
    interval = setInterval(moveSnake, intervalTime);
    spawnItems(); // —Ñ-—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤ —Ç–∞ –¥–µ–±–∞—Ñ—ñ–≤
}

function getValidStartPosition() { //—Ñ-—Ü—ñ—è —è–∫–∞ –≤–∏–∑–Ω–∞—á–∞—î –ø–æ—á–∞—Ç–∫–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é –∑–º—ñ–π–∫–∏
    const validSnake = [];
    const startRow = Math.floor(gridSize / 2); //–æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–∏–Ω–∏ –ø–æ–ª—è
    const startCol = Math.floor(gridSize / 2);
    validSnake.push(startRow * gridSize + startCol); //—ñ–Ω–¥–µ–∫—Å –∫–ª—ñ—Ç–∏–Ω–∫–∏ –≥–æ–ª–æ–≤–∏ –∑–º—ñ–π–∫–∏ 
    validSnake.push(validSnake[0] - 1); //–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –∑–º—ñ–π–∫–∏
    validSnake.push(validSnake[1] - 1);
    //console.log(validSnake);
    return validSnake; //—Ñ-—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —ñ–Ω–¥–µ–∫—Å—ñ–≤, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é –∑–º—ñ–π–∫–∏
}

function randomFood() {
    do {
        foodIndex = Math.floor(Math.random() * cells.length);
    } while (cells[foodIndex].classList.contains('border') || 
            cells[foodIndex].classList.contains('snake')); //–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ñ—Å—Ç—å –∫–ª—ñ—Ç–∏–Ω–∫–∏
   
    const randomFoodEmoji = foodEmojis[Math.floor(Math.random() * foodEmojis.length)];
    cells[foodIndex].innerText = randomFoodEmoji;
    cells[foodIndex].classList.add('food');
    foodItems.push(foodIndex);
}

function spawnItems() {
    setInterval(() => {
        if (Math.random() < 0.15) { // 15% –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –¥–ª—è –±–æ–Ω—É—Å—É
            spawnBonus();
        }
        if (Math.random() < 0.15) { // 15% –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –¥–ª—è –¥–µ–±–∞—Ñ—É
            spawnDebuff();
        }
    }, 15000); // –∫–æ–∂–Ω—ñ 15 —Å–µ–∫—É–Ω–¥
}

function spawnBonus() {
    let bonusIndex;
    do {
        bonusIndex = Math.floor(Math.random() * cells.length);
    } while (cells[bonusIndex].classList.contains('border') || 
    cells[bonusIndex].classList.contains('snake') || 
    cells[bonusIndex].classList.contains('bonus'));

    cells[bonusIndex].innerText = bonusEmoji;
    cells[bonusIndex].classList.add('bonus');
    bonusItems.push(bonusIndex);

    setTimeout(((index) => () => {
        if (cells[index].classList.contains('bonus')) {
            cells[index].innerText = '';
            cells[index].classList.remove('bonus');
            bonusItems = bonusItems.filter(i => i !== index);
        }
    })(bonusIndex), 8000); //–±–æ–Ω—É—Å –∑–Ω–∏–∫–∞—î —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
}

function spawnDebuff() {
    let debuffIndex;
    do {
        debuffIndex = Math.floor(Math.random() * cells.length);
    } while (
        cells[debuffIndex].classList.contains('border') || 
        cells[debuffIndex].classList.contains('snake') || 
        cells[debuffIndex].classList.contains('debuff'));

    cells[debuffIndex].innerText = debuffEmoji;
    cells[debuffIndex].classList.add('debuff');
    debuffItems.push(debuffIndex);

    setTimeout(((index) => () => {
        if (cells[index].classList.contains('debuff')) {
            cells[index].innerText = '';
            cells[index].classList.remove('debuff');
            debuffItems = debuffItems.filter(i => i !== index);
        }
    })(debuffIndex), 8000); //–¥–µ–±–∞—Ñ –∑–Ω–∏–∫–∞—î —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
}

// function endGame() {
//     clearInterval(interval);
//     clearInterval(timerInterval);
//     document.getElementById('nickname-modal').style.display = 'block';
//   }

function moveSnake() {
    const tail = snake.pop(); //–≤–∏–¥–∞–ª—è—î –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É snake (—Ö–≤—ñ—Å—Ç –∑–º—ñ—ó)
    cells[tail].innerText = '';
    cells[tail].classList.remove('snake');

    const head = snake[0] + direction; //–æ–±—á–∏—Å–ª–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –≥–æ–ª–æ–≤–∏ –∑–º—ñ—ó

    if ( //–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è –∞–±–æ –≤–∏—Ö—ñ–¥ –∑–∞ –º–µ–∂—ñ
        (head >= gridSize * gridSize && direction === gridSize) ||
        (head % gridSize === gridSize - 1 && direction === 1) ||
        (head % gridSize === 0 && direction === -1) ||
        (head < 0 && direction === -gridSize) ||
        cells[head].classList.contains('snake') ||
        cells[head].classList.contains('border')
    ) {
        clearInterval(interval);
        clearInterval(timerInterval); //–∑—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –ø—Ä–æ–≥—Ä–∞—à—ñ
        // endGame(); // –í–∏–∫–ª–∏–∫–∞—î–º–æ endGame, —è–∫—â–æ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è –∞–±–æ –≤–∏—Ö—ñ–¥ –∑–∞ –º–µ–∂—ñ
        return;
    }

    snake.unshift(head);

    if (cells[head].classList.contains('food')) {
        updateScore(10);
        cells[head].classList.remove('food');
        randomFood();
        snake.push(tail);
        clearInterval(interval);
        intervalTime = intervalTime * 0.98; //—à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–±—ñ–ª—å—à—É—î—Ç—å—Å—è –Ω–∞ 2%
        interval = setInterval(moveSnake, intervalTime);
    } else if (cells[head].classList.contains('bonus')) {
        updateScore(100);
        cells[head].classList.remove('bonus');
        bonusItems = bonusItems.filter(i => i !== head); //–≤–∏–¥–∞–ª—è—î–º–æ –∑ –º–∞—Å–∏–≤—É –±–æ–Ω—É—Å—ñ–≤
        // randomFood();
        snake.push(tail);
        clearInterval(interval);
        intervalTime = intervalTime * 0.98; //—à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–±—ñ–ª—å—à—É—î—Ç—å—Å—è –Ω–∞ 2%
        interval = setInterval(moveSnake, intervalTime);
    } else if (cells[head].classList.contains('debuff')) {
        updateScore(-50);
        cells[head].classList.remove('debuff');
        debuffItems = debuffItems.filter(i => i !== head); //–≤–∏–¥–∞–ª—è—î–º–æ –∑ –º–∞—Å–∏–≤—É –¥–µ–±–∞—Ñ—ñ–≤
        // randomFood();
        snake.push(tail);
        clearInterval(interval);
        intervalTime = intervalTime * 0.98; //—à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–±—ñ–ª—å—à—É—î—Ç—å—Å—è –Ω–∞ 2%
        interval = setInterval(moveSnake, intervalTime);
    }

    cells[head].innerText = snakeEmoji;
    cells[head].classList.add('snake');
}

function updateScore(points) {
    score += points;
    scoreDisplay.innerText = `Score: ${score}`;
}

function control(e) { //–æ–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–ª–∞–≤—ñ—à
    if (e.keyCode === 39 && direction !== -1) {
        direction = 1;
    } else if (e.keyCode === 38 && direction !== gridSize) {
        direction = -gridSize;
    } else if (e.keyCode === 37 && direction !== 1) {
        direction = -1;
    } else if (e.keyCode === 40 && direction !== -gridSize) {
        direction = gridSize;
    }
}

function controlDirection(dir) { //—É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ
    if (dir === 'left' && direction !== 1) {
        direction = -1;
    } else if (dir === 'up' && direction !== gridSize) {
        direction = -gridSize;
    } else if (dir === 'right' && direction !== -1) {
        direction = 1;
    } else if (dir === 'down' && direction !== -gridSize) {
        direction = gridSize;
    }
}

document.addEventListener('keydown', control);
document.getElementById('left').addEventListener('click', () => controlDirection('left'));
document.getElementById('up').addEventListener('click', () => controlDirection('up'));
document.getElementById('right').addEventListener('click', () => controlDirection('right'));
document.getElementById('down').addEventListener('click', () => controlDirection('down'));
document.getElementById('restart').addEventListener('click', startGame);

startGame();